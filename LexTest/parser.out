Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expressions
Rule 1     expressions -> expressions NEWLINE block
Rule 2     expressions -> expressions NEWLINE stmt
Rule 3     expressions -> block
Rule 4     expressions -> stmt
Rule 5     enter -> BUILD FUNC LBRACE
Rule 6     enter -> LOOPT LBRACE
Rule 7     enter -> LOOPF LBRACE
Rule 8     enter -> REPT LBRACE
Rule 9     enter -> REPF LBRACE
Rule 10    enter -> IFT LBRACE
Rule 11    enter -> IFF LBRACE
Rule 12    block -> enter NEWLINE expressions NEWLINE RBRACE
Rule 13    stmt -> AXE
Rule 14    stmt -> CHICKEN
Rule 15    stmt -> ADD
Rule 16    stmt -> FOX
Rule 17    stmt -> ROOSTER
Rule 18    stmt -> COMPARE
Rule 19    stmt -> PICK
Rule 20    stmt -> PECK
Rule 21    stmt -> FR
Rule 22    stmt -> BBQ
Rule 23    stmt -> HATCH FUNC
Rule 24    stmt -> PUSH STR
Rule 25    stmt -> PUSH mathexpr
Rule 26    stmt -> IDSTR AS IDSTR
Rule 27    stmt -> ID LBRACK INT RBRACK EQ VAL
Rule 28    stmt -> ID EQ VAL
Rule 29    stmt -> ID LBRACK INT RBRACK
Rule 30    stmt -> ID
Rule 31    stmt -> CONST ID EQ VAL
Rule 32    stmt -> <empty>
Rule 33    mathexpr -> mathexpr MUL mathexpr
Rule 34    mathexpr -> mathexpr DIV mathexpr
Rule 35    mathexpr -> mathexpr ADDE mathexpr
Rule 36    mathexpr -> mathexpr SUB mathexpr
Rule 37    mathexpr -> mathexpr POW mathexpr
Rule 38    mathexpr -> LPAREN mathexpr RPAREN
Rule 39    mathexpr -> SUB mathexpr
Rule 40    mathexpr -> ADDE mathexpr
Rule 41    mathexpr -> INT
Rule 42    mathexpr -> FLOAT
Rule 43    mathexpr -> ID
Rule 44    FUNC -> ID DOT FUNC
Rule 45    FUNC -> ID
Rule 46    VAL -> STR
Rule 47    VAL -> TOP
Rule 48    VAL -> mathexpr
Rule 49    IDSTR -> ID
Rule 50    IDSTR -> STR

Terminals, with rules where they appear

ADD                  : 15
ADDE                 : 35 40
AS                   : 26
AXE                  : 13
BBQ                  : 22
BUILD                : 5
CHICKEN              : 14
COMPARE              : 18
CONST                : 31
DIV                  : 34
DOT                  : 44
EQ                   : 27 28 31
FLOAT                : 42
FOX                  : 16
FR                   : 21
HATCH                : 23
ID                   : 27 28 29 30 31 43 44 45 49
IFF                  : 11
IFT                  : 10
INT                  : 27 29 41
LBRACE               : 5 6 7 8 9 10 11
LBRACK               : 27 29
LOOPF                : 7
LOOPT                : 6
LPAREN               : 38
MUL                  : 33
NEWLINE              : 1 2 12 12
PECK                 : 20
PICK                 : 19
POW                  : 37
PUSH                 : 24 25
RBRACE               : 12
RBRACK               : 27 29
REPF                 : 9
REPT                 : 8
ROOSTER              : 17
RPAREN               : 38
STR                  : 24 46 50
SUB                  : 36 39
TOP                  : 47
error                : 

Nonterminals, with rules where they appear

FUNC                 : 5 23 44
IDSTR                : 26 26
VAL                  : 27 28 31
block                : 1 3
enter                : 12
expressions          : 1 2 12 0
mathexpr             : 25 33 33 34 34 35 35 36 36 37 37 38 39 40 48
stmt                 : 2 4

Parsing method: LALR

state 0

    (0) S' -> . expressions
    (1) expressions -> . expressions NEWLINE block
    (2) expressions -> . expressions NEWLINE stmt
    (3) expressions -> . block
    (4) expressions -> . stmt
    (12) block -> . enter NEWLINE expressions NEWLINE RBRACE
    (13) stmt -> . AXE
    (14) stmt -> . CHICKEN
    (15) stmt -> . ADD
    (16) stmt -> . FOX
    (17) stmt -> . ROOSTER
    (18) stmt -> . COMPARE
    (19) stmt -> . PICK
    (20) stmt -> . PECK
    (21) stmt -> . FR
    (22) stmt -> . BBQ
    (23) stmt -> . HATCH FUNC
    (24) stmt -> . PUSH STR
    (25) stmt -> . PUSH mathexpr
    (26) stmt -> . IDSTR AS IDSTR
    (27) stmt -> . ID LBRACK INT RBRACK EQ VAL
    (28) stmt -> . ID EQ VAL
    (29) stmt -> . ID LBRACK INT RBRACK
    (30) stmt -> . ID
    (31) stmt -> . CONST ID EQ VAL
    (32) stmt -> .
    (5) enter -> . BUILD FUNC LBRACE
    (6) enter -> . LOOPT LBRACE
    (7) enter -> . LOOPF LBRACE
    (8) enter -> . REPT LBRACE
    (9) enter -> . REPF LBRACE
    (10) enter -> . IFT LBRACE
    (11) enter -> . IFF LBRACE
    (49) IDSTR -> . ID
    (50) IDSTR -> . STR

    AXE             shift and go to state 5
    CHICKEN         shift and go to state 6
    ADD             shift and go to state 7
    FOX             shift and go to state 8
    ROOSTER         shift and go to state 9
    COMPARE         shift and go to state 10
    PICK            shift and go to state 11
    PECK            shift and go to state 12
    FR              shift and go to state 13
    BBQ             shift and go to state 14
    HATCH           shift and go to state 15
    PUSH            shift and go to state 16
    ID              shift and go to state 19
    CONST           shift and go to state 20
    NEWLINE         reduce using rule 32 (stmt -> .)
    $end            reduce using rule 32 (stmt -> .)
    BUILD           shift and go to state 21
    LOOPT           shift and go to state 22
    LOOPF           shift and go to state 23
    REPT            shift and go to state 24
    REPF            shift and go to state 25
    IFT             shift and go to state 26
    IFF             shift and go to state 27
    STR             shift and go to state 17

    expressions                    shift and go to state 1
    block                          shift and go to state 2
    stmt                           shift and go to state 3
    enter                          shift and go to state 4
    IDSTR                          shift and go to state 18

state 1

    (0) S' -> expressions .
    (1) expressions -> expressions . NEWLINE block
    (2) expressions -> expressions . NEWLINE stmt

    NEWLINE         shift and go to state 28


state 2

    (3) expressions -> block .

    NEWLINE         reduce using rule 3 (expressions -> block .)
    $end            reduce using rule 3 (expressions -> block .)


state 3

    (4) expressions -> stmt .

    NEWLINE         reduce using rule 4 (expressions -> stmt .)
    $end            reduce using rule 4 (expressions -> stmt .)


state 4

    (12) block -> enter . NEWLINE expressions NEWLINE RBRACE

    NEWLINE         shift and go to state 29


state 5

    (13) stmt -> AXE .

    NEWLINE         reduce using rule 13 (stmt -> AXE .)
    $end            reduce using rule 13 (stmt -> AXE .)


state 6

    (14) stmt -> CHICKEN .

    NEWLINE         reduce using rule 14 (stmt -> CHICKEN .)
    $end            reduce using rule 14 (stmt -> CHICKEN .)


state 7

    (15) stmt -> ADD .

    NEWLINE         reduce using rule 15 (stmt -> ADD .)
    $end            reduce using rule 15 (stmt -> ADD .)


state 8

    (16) stmt -> FOX .

    NEWLINE         reduce using rule 16 (stmt -> FOX .)
    $end            reduce using rule 16 (stmt -> FOX .)


state 9

    (17) stmt -> ROOSTER .

    NEWLINE         reduce using rule 17 (stmt -> ROOSTER .)
    $end            reduce using rule 17 (stmt -> ROOSTER .)


state 10

    (18) stmt -> COMPARE .

    NEWLINE         reduce using rule 18 (stmt -> COMPARE .)
    $end            reduce using rule 18 (stmt -> COMPARE .)


state 11

    (19) stmt -> PICK .

    NEWLINE         reduce using rule 19 (stmt -> PICK .)
    $end            reduce using rule 19 (stmt -> PICK .)


state 12

    (20) stmt -> PECK .

    NEWLINE         reduce using rule 20 (stmt -> PECK .)
    $end            reduce using rule 20 (stmt -> PECK .)


state 13

    (21) stmt -> FR .

    NEWLINE         reduce using rule 21 (stmt -> FR .)
    $end            reduce using rule 21 (stmt -> FR .)


state 14

    (22) stmt -> BBQ .

    NEWLINE         reduce using rule 22 (stmt -> BBQ .)
    $end            reduce using rule 22 (stmt -> BBQ .)


state 15

    (23) stmt -> HATCH . FUNC
    (44) FUNC -> . ID DOT FUNC
    (45) FUNC -> . ID

    ID              shift and go to state 31

    FUNC                           shift and go to state 30

state 16

    (24) stmt -> PUSH . STR
    (25) stmt -> PUSH . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    STR             shift and go to state 32
    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    mathexpr                       shift and go to state 33

state 17

    (50) IDSTR -> STR .

    AS              reduce using rule 50 (IDSTR -> STR .)
    NEWLINE         reduce using rule 50 (IDSTR -> STR .)
    $end            reduce using rule 50 (IDSTR -> STR .)


state 18

    (26) stmt -> IDSTR . AS IDSTR

    AS              shift and go to state 40


state 19

    (27) stmt -> ID . LBRACK INT RBRACK EQ VAL
    (28) stmt -> ID . EQ VAL
    (29) stmt -> ID . LBRACK INT RBRACK
    (30) stmt -> ID .
    (49) IDSTR -> ID .

    LBRACK          shift and go to state 41
    EQ              shift and go to state 42
    NEWLINE         reduce using rule 30 (stmt -> ID .)
    $end            reduce using rule 30 (stmt -> ID .)
    AS              reduce using rule 49 (IDSTR -> ID .)


state 20

    (31) stmt -> CONST . ID EQ VAL

    ID              shift and go to state 43


state 21

    (5) enter -> BUILD . FUNC LBRACE
    (44) FUNC -> . ID DOT FUNC
    (45) FUNC -> . ID

    ID              shift and go to state 31

    FUNC                           shift and go to state 44

state 22

    (6) enter -> LOOPT . LBRACE

    LBRACE          shift and go to state 45


state 23

    (7) enter -> LOOPF . LBRACE

    LBRACE          shift and go to state 46


state 24

    (8) enter -> REPT . LBRACE

    LBRACE          shift and go to state 47


state 25

    (9) enter -> REPF . LBRACE

    LBRACE          shift and go to state 48


state 26

    (10) enter -> IFT . LBRACE

    LBRACE          shift and go to state 49


state 27

    (11) enter -> IFF . LBRACE

    LBRACE          shift and go to state 50


state 28

    (1) expressions -> expressions NEWLINE . block
    (2) expressions -> expressions NEWLINE . stmt
    (12) block -> . enter NEWLINE expressions NEWLINE RBRACE
    (13) stmt -> . AXE
    (14) stmt -> . CHICKEN
    (15) stmt -> . ADD
    (16) stmt -> . FOX
    (17) stmt -> . ROOSTER
    (18) stmt -> . COMPARE
    (19) stmt -> . PICK
    (20) stmt -> . PECK
    (21) stmt -> . FR
    (22) stmt -> . BBQ
    (23) stmt -> . HATCH FUNC
    (24) stmt -> . PUSH STR
    (25) stmt -> . PUSH mathexpr
    (26) stmt -> . IDSTR AS IDSTR
    (27) stmt -> . ID LBRACK INT RBRACK EQ VAL
    (28) stmt -> . ID EQ VAL
    (29) stmt -> . ID LBRACK INT RBRACK
    (30) stmt -> . ID
    (31) stmt -> . CONST ID EQ VAL
    (32) stmt -> .
    (5) enter -> . BUILD FUNC LBRACE
    (6) enter -> . LOOPT LBRACE
    (7) enter -> . LOOPF LBRACE
    (8) enter -> . REPT LBRACE
    (9) enter -> . REPF LBRACE
    (10) enter -> . IFT LBRACE
    (11) enter -> . IFF LBRACE
    (49) IDSTR -> . ID
    (50) IDSTR -> . STR

    AXE             shift and go to state 5
    CHICKEN         shift and go to state 6
    ADD             shift and go to state 7
    FOX             shift and go to state 8
    ROOSTER         shift and go to state 9
    COMPARE         shift and go to state 10
    PICK            shift and go to state 11
    PECK            shift and go to state 12
    FR              shift and go to state 13
    BBQ             shift and go to state 14
    HATCH           shift and go to state 15
    PUSH            shift and go to state 16
    ID              shift and go to state 19
    CONST           shift and go to state 20
    NEWLINE         reduce using rule 32 (stmt -> .)
    $end            reduce using rule 32 (stmt -> .)
    BUILD           shift and go to state 21
    LOOPT           shift and go to state 22
    LOOPF           shift and go to state 23
    REPT            shift and go to state 24
    REPF            shift and go to state 25
    IFT             shift and go to state 26
    IFF             shift and go to state 27
    STR             shift and go to state 17

    block                          shift and go to state 51
    stmt                           shift and go to state 52
    enter                          shift and go to state 4
    IDSTR                          shift and go to state 18

state 29

    (12) block -> enter NEWLINE . expressions NEWLINE RBRACE
    (1) expressions -> . expressions NEWLINE block
    (2) expressions -> . expressions NEWLINE stmt
    (3) expressions -> . block
    (4) expressions -> . stmt
    (12) block -> . enter NEWLINE expressions NEWLINE RBRACE
    (13) stmt -> . AXE
    (14) stmt -> . CHICKEN
    (15) stmt -> . ADD
    (16) stmt -> . FOX
    (17) stmt -> . ROOSTER
    (18) stmt -> . COMPARE
    (19) stmt -> . PICK
    (20) stmt -> . PECK
    (21) stmt -> . FR
    (22) stmt -> . BBQ
    (23) stmt -> . HATCH FUNC
    (24) stmt -> . PUSH STR
    (25) stmt -> . PUSH mathexpr
    (26) stmt -> . IDSTR AS IDSTR
    (27) stmt -> . ID LBRACK INT RBRACK EQ VAL
    (28) stmt -> . ID EQ VAL
    (29) stmt -> . ID LBRACK INT RBRACK
    (30) stmt -> . ID
    (31) stmt -> . CONST ID EQ VAL
    (32) stmt -> .
    (5) enter -> . BUILD FUNC LBRACE
    (6) enter -> . LOOPT LBRACE
    (7) enter -> . LOOPF LBRACE
    (8) enter -> . REPT LBRACE
    (9) enter -> . REPF LBRACE
    (10) enter -> . IFT LBRACE
    (11) enter -> . IFF LBRACE
    (49) IDSTR -> . ID
    (50) IDSTR -> . STR

    AXE             shift and go to state 5
    CHICKEN         shift and go to state 6
    ADD             shift and go to state 7
    FOX             shift and go to state 8
    ROOSTER         shift and go to state 9
    COMPARE         shift and go to state 10
    PICK            shift and go to state 11
    PECK            shift and go to state 12
    FR              shift and go to state 13
    BBQ             shift and go to state 14
    HATCH           shift and go to state 15
    PUSH            shift and go to state 16
    ID              shift and go to state 19
    CONST           shift and go to state 20
    NEWLINE         reduce using rule 32 (stmt -> .)
    BUILD           shift and go to state 21
    LOOPT           shift and go to state 22
    LOOPF           shift and go to state 23
    REPT            shift and go to state 24
    REPF            shift and go to state 25
    IFT             shift and go to state 26
    IFF             shift and go to state 27
    STR             shift and go to state 17

    enter                          shift and go to state 4
    expressions                    shift and go to state 53
    block                          shift and go to state 2
    stmt                           shift and go to state 3
    IDSTR                          shift and go to state 18

state 30

    (23) stmt -> HATCH FUNC .

    NEWLINE         reduce using rule 23 (stmt -> HATCH FUNC .)
    $end            reduce using rule 23 (stmt -> HATCH FUNC .)


state 31

    (44) FUNC -> ID . DOT FUNC
    (45) FUNC -> ID .

    DOT             shift and go to state 54
    NEWLINE         reduce using rule 45 (FUNC -> ID .)
    $end            reduce using rule 45 (FUNC -> ID .)
    LBRACE          reduce using rule 45 (FUNC -> ID .)


state 32

    (24) stmt -> PUSH STR .

    NEWLINE         reduce using rule 24 (stmt -> PUSH STR .)
    $end            reduce using rule 24 (stmt -> PUSH STR .)


state 33

    (25) stmt -> PUSH mathexpr .
    (33) mathexpr -> mathexpr . MUL mathexpr
    (34) mathexpr -> mathexpr . DIV mathexpr
    (35) mathexpr -> mathexpr . ADDE mathexpr
    (36) mathexpr -> mathexpr . SUB mathexpr
    (37) mathexpr -> mathexpr . POW mathexpr

    NEWLINE         reduce using rule 25 (stmt -> PUSH mathexpr .)
    $end            reduce using rule 25 (stmt -> PUSH mathexpr .)
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    ADDE            shift and go to state 57
    SUB             shift and go to state 58
    POW             shift and go to state 59


state 34

    (40) mathexpr -> ADDE . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    mathexpr                       shift and go to state 60

state 35

    (39) mathexpr -> SUB . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    mathexpr                       shift and go to state 61

state 36

    (38) mathexpr -> LPAREN . mathexpr RPAREN
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    mathexpr                       shift and go to state 62

state 37

    (41) mathexpr -> INT .

    MUL             reduce using rule 41 (mathexpr -> INT .)
    DIV             reduce using rule 41 (mathexpr -> INT .)
    ADDE            reduce using rule 41 (mathexpr -> INT .)
    SUB             reduce using rule 41 (mathexpr -> INT .)
    POW             reduce using rule 41 (mathexpr -> INT .)
    NEWLINE         reduce using rule 41 (mathexpr -> INT .)
    $end            reduce using rule 41 (mathexpr -> INT .)
    RPAREN          reduce using rule 41 (mathexpr -> INT .)


state 38

    (42) mathexpr -> FLOAT .

    MUL             reduce using rule 42 (mathexpr -> FLOAT .)
    DIV             reduce using rule 42 (mathexpr -> FLOAT .)
    ADDE            reduce using rule 42 (mathexpr -> FLOAT .)
    SUB             reduce using rule 42 (mathexpr -> FLOAT .)
    POW             reduce using rule 42 (mathexpr -> FLOAT .)
    NEWLINE         reduce using rule 42 (mathexpr -> FLOAT .)
    $end            reduce using rule 42 (mathexpr -> FLOAT .)
    RPAREN          reduce using rule 42 (mathexpr -> FLOAT .)


state 39

    (43) mathexpr -> ID .

    MUL             reduce using rule 43 (mathexpr -> ID .)
    DIV             reduce using rule 43 (mathexpr -> ID .)
    ADDE            reduce using rule 43 (mathexpr -> ID .)
    SUB             reduce using rule 43 (mathexpr -> ID .)
    POW             reduce using rule 43 (mathexpr -> ID .)
    NEWLINE         reduce using rule 43 (mathexpr -> ID .)
    $end            reduce using rule 43 (mathexpr -> ID .)
    RPAREN          reduce using rule 43 (mathexpr -> ID .)


state 40

    (26) stmt -> IDSTR AS . IDSTR
    (49) IDSTR -> . ID
    (50) IDSTR -> . STR

    ID              shift and go to state 64
    STR             shift and go to state 17

    IDSTR                          shift and go to state 63

state 41

    (27) stmt -> ID LBRACK . INT RBRACK EQ VAL
    (29) stmt -> ID LBRACK . INT RBRACK

    INT             shift and go to state 65


state 42

    (28) stmt -> ID EQ . VAL
    (46) VAL -> . STR
    (47) VAL -> . TOP
    (48) VAL -> . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    STR             shift and go to state 67
    TOP             shift and go to state 68
    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    VAL                            shift and go to state 66
    mathexpr                       shift and go to state 69

state 43

    (31) stmt -> CONST ID . EQ VAL

    EQ              shift and go to state 70


state 44

    (5) enter -> BUILD FUNC . LBRACE

    LBRACE          shift and go to state 71


state 45

    (6) enter -> LOOPT LBRACE .

    NEWLINE         reduce using rule 6 (enter -> LOOPT LBRACE .)


state 46

    (7) enter -> LOOPF LBRACE .

    NEWLINE         reduce using rule 7 (enter -> LOOPF LBRACE .)


state 47

    (8) enter -> REPT LBRACE .

    NEWLINE         reduce using rule 8 (enter -> REPT LBRACE .)


state 48

    (9) enter -> REPF LBRACE .

    NEWLINE         reduce using rule 9 (enter -> REPF LBRACE .)


state 49

    (10) enter -> IFT LBRACE .

    NEWLINE         reduce using rule 10 (enter -> IFT LBRACE .)


state 50

    (11) enter -> IFF LBRACE .

    NEWLINE         reduce using rule 11 (enter -> IFF LBRACE .)


state 51

    (1) expressions -> expressions NEWLINE block .

    NEWLINE         reduce using rule 1 (expressions -> expressions NEWLINE block .)
    $end            reduce using rule 1 (expressions -> expressions NEWLINE block .)


state 52

    (2) expressions -> expressions NEWLINE stmt .

    NEWLINE         reduce using rule 2 (expressions -> expressions NEWLINE stmt .)
    $end            reduce using rule 2 (expressions -> expressions NEWLINE stmt .)


state 53

    (12) block -> enter NEWLINE expressions . NEWLINE RBRACE
    (1) expressions -> expressions . NEWLINE block
    (2) expressions -> expressions . NEWLINE stmt

    NEWLINE         shift and go to state 72


state 54

    (44) FUNC -> ID DOT . FUNC
    (44) FUNC -> . ID DOT FUNC
    (45) FUNC -> . ID

    ID              shift and go to state 31

    FUNC                           shift and go to state 73

state 55

    (33) mathexpr -> mathexpr MUL . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    mathexpr                       shift and go to state 74

state 56

    (34) mathexpr -> mathexpr DIV . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    mathexpr                       shift and go to state 75

state 57

    (35) mathexpr -> mathexpr ADDE . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    mathexpr                       shift and go to state 76

state 58

    (36) mathexpr -> mathexpr SUB . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    mathexpr                       shift and go to state 77

state 59

    (37) mathexpr -> mathexpr POW . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    mathexpr                       shift and go to state 78

state 60

    (40) mathexpr -> ADDE mathexpr .
    (33) mathexpr -> mathexpr . MUL mathexpr
    (34) mathexpr -> mathexpr . DIV mathexpr
    (35) mathexpr -> mathexpr . ADDE mathexpr
    (36) mathexpr -> mathexpr . SUB mathexpr
    (37) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 40 (mathexpr -> ADDE mathexpr .)
    DIV             reduce using rule 40 (mathexpr -> ADDE mathexpr .)
    ADDE            reduce using rule 40 (mathexpr -> ADDE mathexpr .)
    SUB             reduce using rule 40 (mathexpr -> ADDE mathexpr .)
    NEWLINE         reduce using rule 40 (mathexpr -> ADDE mathexpr .)
    $end            reduce using rule 40 (mathexpr -> ADDE mathexpr .)
    RPAREN          reduce using rule 40 (mathexpr -> ADDE mathexpr .)
    POW             shift and go to state 59

  ! POW             [ reduce using rule 40 (mathexpr -> ADDE mathexpr .) ]
  ! MUL             [ shift and go to state 55 ]
  ! DIV             [ shift and go to state 56 ]
  ! ADDE            [ shift and go to state 57 ]
  ! SUB             [ shift and go to state 58 ]


state 61

    (39) mathexpr -> SUB mathexpr .
    (33) mathexpr -> mathexpr . MUL mathexpr
    (34) mathexpr -> mathexpr . DIV mathexpr
    (35) mathexpr -> mathexpr . ADDE mathexpr
    (36) mathexpr -> mathexpr . SUB mathexpr
    (37) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 39 (mathexpr -> SUB mathexpr .)
    DIV             reduce using rule 39 (mathexpr -> SUB mathexpr .)
    ADDE            reduce using rule 39 (mathexpr -> SUB mathexpr .)
    SUB             reduce using rule 39 (mathexpr -> SUB mathexpr .)
    NEWLINE         reduce using rule 39 (mathexpr -> SUB mathexpr .)
    $end            reduce using rule 39 (mathexpr -> SUB mathexpr .)
    RPAREN          reduce using rule 39 (mathexpr -> SUB mathexpr .)
    POW             shift and go to state 59

  ! POW             [ reduce using rule 39 (mathexpr -> SUB mathexpr .) ]
  ! MUL             [ shift and go to state 55 ]
  ! DIV             [ shift and go to state 56 ]
  ! ADDE            [ shift and go to state 57 ]
  ! SUB             [ shift and go to state 58 ]


state 62

    (38) mathexpr -> LPAREN mathexpr . RPAREN
    (33) mathexpr -> mathexpr . MUL mathexpr
    (34) mathexpr -> mathexpr . DIV mathexpr
    (35) mathexpr -> mathexpr . ADDE mathexpr
    (36) mathexpr -> mathexpr . SUB mathexpr
    (37) mathexpr -> mathexpr . POW mathexpr

    RPAREN          shift and go to state 79
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    ADDE            shift and go to state 57
    SUB             shift and go to state 58
    POW             shift and go to state 59


state 63

    (26) stmt -> IDSTR AS IDSTR .

    NEWLINE         reduce using rule 26 (stmt -> IDSTR AS IDSTR .)
    $end            reduce using rule 26 (stmt -> IDSTR AS IDSTR .)


state 64

    (49) IDSTR -> ID .

    NEWLINE         reduce using rule 49 (IDSTR -> ID .)
    $end            reduce using rule 49 (IDSTR -> ID .)


state 65

    (27) stmt -> ID LBRACK INT . RBRACK EQ VAL
    (29) stmt -> ID LBRACK INT . RBRACK

    RBRACK          shift and go to state 80


state 66

    (28) stmt -> ID EQ VAL .

    NEWLINE         reduce using rule 28 (stmt -> ID EQ VAL .)
    $end            reduce using rule 28 (stmt -> ID EQ VAL .)


state 67

    (46) VAL -> STR .

    NEWLINE         reduce using rule 46 (VAL -> STR .)
    $end            reduce using rule 46 (VAL -> STR .)


state 68

    (47) VAL -> TOP .

    NEWLINE         reduce using rule 47 (VAL -> TOP .)
    $end            reduce using rule 47 (VAL -> TOP .)


state 69

    (48) VAL -> mathexpr .
    (33) mathexpr -> mathexpr . MUL mathexpr
    (34) mathexpr -> mathexpr . DIV mathexpr
    (35) mathexpr -> mathexpr . ADDE mathexpr
    (36) mathexpr -> mathexpr . SUB mathexpr
    (37) mathexpr -> mathexpr . POW mathexpr

    NEWLINE         reduce using rule 48 (VAL -> mathexpr .)
    $end            reduce using rule 48 (VAL -> mathexpr .)
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    ADDE            shift and go to state 57
    SUB             shift and go to state 58
    POW             shift and go to state 59


state 70

    (31) stmt -> CONST ID EQ . VAL
    (46) VAL -> . STR
    (47) VAL -> . TOP
    (48) VAL -> . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    STR             shift and go to state 67
    TOP             shift and go to state 68
    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    VAL                            shift and go to state 81
    mathexpr                       shift and go to state 69

state 71

    (5) enter -> BUILD FUNC LBRACE .

    NEWLINE         reduce using rule 5 (enter -> BUILD FUNC LBRACE .)


state 72

    (12) block -> enter NEWLINE expressions NEWLINE . RBRACE
    (1) expressions -> expressions NEWLINE . block
    (2) expressions -> expressions NEWLINE . stmt
    (12) block -> . enter NEWLINE expressions NEWLINE RBRACE
    (13) stmt -> . AXE
    (14) stmt -> . CHICKEN
    (15) stmt -> . ADD
    (16) stmt -> . FOX
    (17) stmt -> . ROOSTER
    (18) stmt -> . COMPARE
    (19) stmt -> . PICK
    (20) stmt -> . PECK
    (21) stmt -> . FR
    (22) stmt -> . BBQ
    (23) stmt -> . HATCH FUNC
    (24) stmt -> . PUSH STR
    (25) stmt -> . PUSH mathexpr
    (26) stmt -> . IDSTR AS IDSTR
    (27) stmt -> . ID LBRACK INT RBRACK EQ VAL
    (28) stmt -> . ID EQ VAL
    (29) stmt -> . ID LBRACK INT RBRACK
    (30) stmt -> . ID
    (31) stmt -> . CONST ID EQ VAL
    (32) stmt -> .
    (5) enter -> . BUILD FUNC LBRACE
    (6) enter -> . LOOPT LBRACE
    (7) enter -> . LOOPF LBRACE
    (8) enter -> . REPT LBRACE
    (9) enter -> . REPF LBRACE
    (10) enter -> . IFT LBRACE
    (11) enter -> . IFF LBRACE
    (49) IDSTR -> . ID
    (50) IDSTR -> . STR

    RBRACE          shift and go to state 82
    AXE             shift and go to state 5
    CHICKEN         shift and go to state 6
    ADD             shift and go to state 7
    FOX             shift and go to state 8
    ROOSTER         shift and go to state 9
    COMPARE         shift and go to state 10
    PICK            shift and go to state 11
    PECK            shift and go to state 12
    FR              shift and go to state 13
    BBQ             shift and go to state 14
    HATCH           shift and go to state 15
    PUSH            shift and go to state 16
    ID              shift and go to state 19
    CONST           shift and go to state 20
    NEWLINE         reduce using rule 32 (stmt -> .)
    BUILD           shift and go to state 21
    LOOPT           shift and go to state 22
    LOOPF           shift and go to state 23
    REPT            shift and go to state 24
    REPF            shift and go to state 25
    IFT             shift and go to state 26
    IFF             shift and go to state 27
    STR             shift and go to state 17

    enter                          shift and go to state 4
    block                          shift and go to state 51
    stmt                           shift and go to state 52
    IDSTR                          shift and go to state 18

state 73

    (44) FUNC -> ID DOT FUNC .

    NEWLINE         reduce using rule 44 (FUNC -> ID DOT FUNC .)
    $end            reduce using rule 44 (FUNC -> ID DOT FUNC .)
    LBRACE          reduce using rule 44 (FUNC -> ID DOT FUNC .)


state 74

    (33) mathexpr -> mathexpr MUL mathexpr .
    (33) mathexpr -> mathexpr . MUL mathexpr
    (34) mathexpr -> mathexpr . DIV mathexpr
    (35) mathexpr -> mathexpr . ADDE mathexpr
    (36) mathexpr -> mathexpr . SUB mathexpr
    (37) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 33 (mathexpr -> mathexpr MUL mathexpr .)
    DIV             reduce using rule 33 (mathexpr -> mathexpr MUL mathexpr .)
    ADDE            reduce using rule 33 (mathexpr -> mathexpr MUL mathexpr .)
    SUB             reduce using rule 33 (mathexpr -> mathexpr MUL mathexpr .)
    NEWLINE         reduce using rule 33 (mathexpr -> mathexpr MUL mathexpr .)
    $end            reduce using rule 33 (mathexpr -> mathexpr MUL mathexpr .)
    RPAREN          reduce using rule 33 (mathexpr -> mathexpr MUL mathexpr .)
    POW             shift and go to state 59

  ! POW             [ reduce using rule 33 (mathexpr -> mathexpr MUL mathexpr .) ]
  ! MUL             [ shift and go to state 55 ]
  ! DIV             [ shift and go to state 56 ]
  ! ADDE            [ shift and go to state 57 ]
  ! SUB             [ shift and go to state 58 ]


state 75

    (34) mathexpr -> mathexpr DIV mathexpr .
    (33) mathexpr -> mathexpr . MUL mathexpr
    (34) mathexpr -> mathexpr . DIV mathexpr
    (35) mathexpr -> mathexpr . ADDE mathexpr
    (36) mathexpr -> mathexpr . SUB mathexpr
    (37) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 34 (mathexpr -> mathexpr DIV mathexpr .)
    DIV             reduce using rule 34 (mathexpr -> mathexpr DIV mathexpr .)
    ADDE            reduce using rule 34 (mathexpr -> mathexpr DIV mathexpr .)
    SUB             reduce using rule 34 (mathexpr -> mathexpr DIV mathexpr .)
    NEWLINE         reduce using rule 34 (mathexpr -> mathexpr DIV mathexpr .)
    $end            reduce using rule 34 (mathexpr -> mathexpr DIV mathexpr .)
    RPAREN          reduce using rule 34 (mathexpr -> mathexpr DIV mathexpr .)
    POW             shift and go to state 59

  ! POW             [ reduce using rule 34 (mathexpr -> mathexpr DIV mathexpr .) ]
  ! MUL             [ shift and go to state 55 ]
  ! DIV             [ shift and go to state 56 ]
  ! ADDE            [ shift and go to state 57 ]
  ! SUB             [ shift and go to state 58 ]


state 76

    (35) mathexpr -> mathexpr ADDE mathexpr .
    (33) mathexpr -> mathexpr . MUL mathexpr
    (34) mathexpr -> mathexpr . DIV mathexpr
    (35) mathexpr -> mathexpr . ADDE mathexpr
    (36) mathexpr -> mathexpr . SUB mathexpr
    (37) mathexpr -> mathexpr . POW mathexpr

    ADDE            reduce using rule 35 (mathexpr -> mathexpr ADDE mathexpr .)
    SUB             reduce using rule 35 (mathexpr -> mathexpr ADDE mathexpr .)
    NEWLINE         reduce using rule 35 (mathexpr -> mathexpr ADDE mathexpr .)
    $end            reduce using rule 35 (mathexpr -> mathexpr ADDE mathexpr .)
    RPAREN          reduce using rule 35 (mathexpr -> mathexpr ADDE mathexpr .)
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    POW             shift and go to state 59

  ! MUL             [ reduce using rule 35 (mathexpr -> mathexpr ADDE mathexpr .) ]
  ! DIV             [ reduce using rule 35 (mathexpr -> mathexpr ADDE mathexpr .) ]
  ! POW             [ reduce using rule 35 (mathexpr -> mathexpr ADDE mathexpr .) ]
  ! ADDE            [ shift and go to state 57 ]
  ! SUB             [ shift and go to state 58 ]


state 77

    (36) mathexpr -> mathexpr SUB mathexpr .
    (33) mathexpr -> mathexpr . MUL mathexpr
    (34) mathexpr -> mathexpr . DIV mathexpr
    (35) mathexpr -> mathexpr . ADDE mathexpr
    (36) mathexpr -> mathexpr . SUB mathexpr
    (37) mathexpr -> mathexpr . POW mathexpr

    ADDE            reduce using rule 36 (mathexpr -> mathexpr SUB mathexpr .)
    SUB             reduce using rule 36 (mathexpr -> mathexpr SUB mathexpr .)
    NEWLINE         reduce using rule 36 (mathexpr -> mathexpr SUB mathexpr .)
    $end            reduce using rule 36 (mathexpr -> mathexpr SUB mathexpr .)
    RPAREN          reduce using rule 36 (mathexpr -> mathexpr SUB mathexpr .)
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    POW             shift and go to state 59

  ! MUL             [ reduce using rule 36 (mathexpr -> mathexpr SUB mathexpr .) ]
  ! DIV             [ reduce using rule 36 (mathexpr -> mathexpr SUB mathexpr .) ]
  ! POW             [ reduce using rule 36 (mathexpr -> mathexpr SUB mathexpr .) ]
  ! ADDE            [ shift and go to state 57 ]
  ! SUB             [ shift and go to state 58 ]


state 78

    (37) mathexpr -> mathexpr POW mathexpr .
    (33) mathexpr -> mathexpr . MUL mathexpr
    (34) mathexpr -> mathexpr . DIV mathexpr
    (35) mathexpr -> mathexpr . ADDE mathexpr
    (36) mathexpr -> mathexpr . SUB mathexpr
    (37) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 37 (mathexpr -> mathexpr POW mathexpr .)
    DIV             reduce using rule 37 (mathexpr -> mathexpr POW mathexpr .)
    ADDE            reduce using rule 37 (mathexpr -> mathexpr POW mathexpr .)
    SUB             reduce using rule 37 (mathexpr -> mathexpr POW mathexpr .)
    NEWLINE         reduce using rule 37 (mathexpr -> mathexpr POW mathexpr .)
    $end            reduce using rule 37 (mathexpr -> mathexpr POW mathexpr .)
    RPAREN          reduce using rule 37 (mathexpr -> mathexpr POW mathexpr .)
    POW             shift and go to state 59

  ! POW             [ reduce using rule 37 (mathexpr -> mathexpr POW mathexpr .) ]
  ! MUL             [ shift and go to state 55 ]
  ! DIV             [ shift and go to state 56 ]
  ! ADDE            [ shift and go to state 57 ]
  ! SUB             [ shift and go to state 58 ]


state 79

    (38) mathexpr -> LPAREN mathexpr RPAREN .

    MUL             reduce using rule 38 (mathexpr -> LPAREN mathexpr RPAREN .)
    DIV             reduce using rule 38 (mathexpr -> LPAREN mathexpr RPAREN .)
    ADDE            reduce using rule 38 (mathexpr -> LPAREN mathexpr RPAREN .)
    SUB             reduce using rule 38 (mathexpr -> LPAREN mathexpr RPAREN .)
    POW             reduce using rule 38 (mathexpr -> LPAREN mathexpr RPAREN .)
    NEWLINE         reduce using rule 38 (mathexpr -> LPAREN mathexpr RPAREN .)
    $end            reduce using rule 38 (mathexpr -> LPAREN mathexpr RPAREN .)
    RPAREN          reduce using rule 38 (mathexpr -> LPAREN mathexpr RPAREN .)


state 80

    (27) stmt -> ID LBRACK INT RBRACK . EQ VAL
    (29) stmt -> ID LBRACK INT RBRACK .

    EQ              shift and go to state 83
    NEWLINE         reduce using rule 29 (stmt -> ID LBRACK INT RBRACK .)
    $end            reduce using rule 29 (stmt -> ID LBRACK INT RBRACK .)


state 81

    (31) stmt -> CONST ID EQ VAL .

    NEWLINE         reduce using rule 31 (stmt -> CONST ID EQ VAL .)
    $end            reduce using rule 31 (stmt -> CONST ID EQ VAL .)


state 82

    (12) block -> enter NEWLINE expressions NEWLINE RBRACE .

    NEWLINE         reduce using rule 12 (block -> enter NEWLINE expressions NEWLINE RBRACE .)
    $end            reduce using rule 12 (block -> enter NEWLINE expressions NEWLINE RBRACE .)


state 83

    (27) stmt -> ID LBRACK INT RBRACK EQ . VAL
    (46) VAL -> . STR
    (47) VAL -> . TOP
    (48) VAL -> . mathexpr
    (33) mathexpr -> . mathexpr MUL mathexpr
    (34) mathexpr -> . mathexpr DIV mathexpr
    (35) mathexpr -> . mathexpr ADDE mathexpr
    (36) mathexpr -> . mathexpr SUB mathexpr
    (37) mathexpr -> . mathexpr POW mathexpr
    (38) mathexpr -> . LPAREN mathexpr RPAREN
    (39) mathexpr -> . SUB mathexpr
    (40) mathexpr -> . ADDE mathexpr
    (41) mathexpr -> . INT
    (42) mathexpr -> . FLOAT
    (43) mathexpr -> . ID

    STR             shift and go to state 67
    TOP             shift and go to state 68
    LPAREN          shift and go to state 36
    SUB             shift and go to state 35
    ADDE            shift and go to state 34
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    ID              shift and go to state 39

    VAL                            shift and go to state 84
    mathexpr                       shift and go to state 69

state 84

    (27) stmt -> ID LBRACK INT RBRACK EQ VAL .

    NEWLINE         reduce using rule 27 (stmt -> ID LBRACK INT RBRACK EQ VAL .)
    $end            reduce using rule 27 (stmt -> ID LBRACK INT RBRACK EQ VAL .)

