Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expressions
Rule 1     expressions -> expressions NEWLINE block
Rule 2     expressions -> expressions NEWLINE stmt
Rule 3     expressions -> block
Rule 4     expressions -> stmt
Rule 5     enter -> BUILD FUNC LBRACE
Rule 6     enter -> LOOPT LBRACE
Rule 7     enter -> LOOPF LBRACE
Rule 8     enter -> REPT LBRACE
Rule 9     enter -> REPF LBRACE
Rule 10    enter -> IFT LBRACE
Rule 11    enter -> IFF LBRACE
Rule 12    block -> enter NEWLINE expressions NEWLINE RBRACE
Rule 13    stmt -> AXE
Rule 14    stmt -> CHICKEN
Rule 15    stmt -> ADD
Rule 16    stmt -> FOX
Rule 17    stmt -> ROOSTER
Rule 18    stmt -> COMPARE
Rule 19    stmt -> PICK
Rule 20    stmt -> PECK
Rule 21    stmt -> FR
Rule 22    stmt -> BBQ
Rule 23    stmt -> PICK INT
Rule 24    stmt -> PECK INT
Rule 25    stmt -> HATCH FUNC
Rule 26    stmt -> PUSH STR
Rule 27    stmt -> PUSH mathexpr
Rule 28    stmt -> IDSTR AS IDSTR
Rule 29    stmt -> ID LBRACK INT RBRACK EQ VAL
Rule 30    stmt -> ID EQ VAL
Rule 31    stmt -> ID LBRACK INT RBRACK
Rule 32    stmt -> ID
Rule 33    stmt -> CONST ID EQ VAL
Rule 34    stmt -> <empty>
Rule 35    mathexpr -> mathexpr MUL mathexpr
Rule 36    mathexpr -> mathexpr LPAREN mathexpr RPAREN
Rule 37    mathexpr -> mathexpr DIV mathexpr
Rule 38    mathexpr -> mathexpr FDIV mathexpr
Rule 39    mathexpr -> mathexpr ADDE mathexpr
Rule 40    mathexpr -> mathexpr SUB mathexpr
Rule 41    mathexpr -> mathexpr POW mathexpr
Rule 42    mathexpr -> LPAREN mathexpr RPAREN
Rule 43    mathexpr -> SUB mathexpr
Rule 44    mathexpr -> ADDE mathexpr
Rule 45    mathexpr -> INT
Rule 46    mathexpr -> FLOAT
Rule 47    mathexpr -> ID
Rule 48    FUNC -> ID DOT FUNC
Rule 49    FUNC -> ID
Rule 50    VAL -> STR
Rule 51    VAL -> TOP
Rule 52    VAL -> mathexpr
Rule 53    IDSTR -> ID
Rule 54    IDSTR -> STR

Terminals, with rules where they appear

ADD                  : 15
ADDE                 : 39 44
AS                   : 28
AXE                  : 13
BBQ                  : 22
BUILD                : 5
CHICKEN              : 14
COMPARE              : 18
CONST                : 33
DIV                  : 37
DOT                  : 48
EQ                   : 29 30 33
FDIV                 : 38
FLOAT                : 46
FOX                  : 16
FR                   : 21
HATCH                : 25
ID                   : 29 30 31 32 33 47 48 49 53
IFF                  : 11
IFT                  : 10
INT                  : 23 24 29 31 45
LBRACE               : 5 6 7 8 9 10 11
LBRACK               : 29 31
LOOPF                : 7
LOOPT                : 6
LPAREN               : 36 42
MUL                  : 35
NEWLINE              : 1 2 12 12
PECK                 : 20 24
PICK                 : 19 23
POW                  : 41
PUSH                 : 26 27
RBRACE               : 12
RBRACK               : 29 31
REPF                 : 9
REPT                 : 8
ROOSTER              : 17
RPAREN               : 36 42
STR                  : 26 50 54
SUB                  : 40 43
TOP                  : 51
error                : 

Nonterminals, with rules where they appear

FUNC                 : 5 25 48
IDSTR                : 28 28
VAL                  : 29 30 33
block                : 1 3
enter                : 12
expressions          : 1 2 12 0
mathexpr             : 27 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 43 44 52
stmt                 : 2 4

Parsing method: LALR

state 0

    (0) S' -> . expressions
    (1) expressions -> . expressions NEWLINE block
    (2) expressions -> . expressions NEWLINE stmt
    (3) expressions -> . block
    (4) expressions -> . stmt
    (12) block -> . enter NEWLINE expressions NEWLINE RBRACE
    (13) stmt -> . AXE
    (14) stmt -> . CHICKEN
    (15) stmt -> . ADD
    (16) stmt -> . FOX
    (17) stmt -> . ROOSTER
    (18) stmt -> . COMPARE
    (19) stmt -> . PICK
    (20) stmt -> . PECK
    (21) stmt -> . FR
    (22) stmt -> . BBQ
    (23) stmt -> . PICK INT
    (24) stmt -> . PECK INT
    (25) stmt -> . HATCH FUNC
    (26) stmt -> . PUSH STR
    (27) stmt -> . PUSH mathexpr
    (28) stmt -> . IDSTR AS IDSTR
    (29) stmt -> . ID LBRACK INT RBRACK EQ VAL
    (30) stmt -> . ID EQ VAL
    (31) stmt -> . ID LBRACK INT RBRACK
    (32) stmt -> . ID
    (33) stmt -> . CONST ID EQ VAL
    (34) stmt -> .
    (5) enter -> . BUILD FUNC LBRACE
    (6) enter -> . LOOPT LBRACE
    (7) enter -> . LOOPF LBRACE
    (8) enter -> . REPT LBRACE
    (9) enter -> . REPF LBRACE
    (10) enter -> . IFT LBRACE
    (11) enter -> . IFF LBRACE
    (53) IDSTR -> . ID
    (54) IDSTR -> . STR

    AXE             shift and go to state 5
    CHICKEN         shift and go to state 6
    ADD             shift and go to state 7
    FOX             shift and go to state 8
    ROOSTER         shift and go to state 9
    COMPARE         shift and go to state 10
    PICK            shift and go to state 11
    PECK            shift and go to state 12
    FR              shift and go to state 13
    BBQ             shift and go to state 14
    HATCH           shift and go to state 15
    PUSH            shift and go to state 16
    ID              shift and go to state 19
    CONST           shift and go to state 20
    NEWLINE         reduce using rule 34 (stmt -> .)
    $end            reduce using rule 34 (stmt -> .)
    BUILD           shift and go to state 21
    LOOPT           shift and go to state 22
    LOOPF           shift and go to state 23
    REPT            shift and go to state 24
    REPF            shift and go to state 25
    IFT             shift and go to state 26
    IFF             shift and go to state 27
    STR             shift and go to state 17

    expressions                    shift and go to state 1
    block                          shift and go to state 2
    stmt                           shift and go to state 3
    enter                          shift and go to state 4
    IDSTR                          shift and go to state 18

state 1

    (0) S' -> expressions .
    (1) expressions -> expressions . NEWLINE block
    (2) expressions -> expressions . NEWLINE stmt

    NEWLINE         shift and go to state 28


state 2

    (3) expressions -> block .

    NEWLINE         reduce using rule 3 (expressions -> block .)
    $end            reduce using rule 3 (expressions -> block .)


state 3

    (4) expressions -> stmt .

    NEWLINE         reduce using rule 4 (expressions -> stmt .)
    $end            reduce using rule 4 (expressions -> stmt .)


state 4

    (12) block -> enter . NEWLINE expressions NEWLINE RBRACE

    NEWLINE         shift and go to state 29


state 5

    (13) stmt -> AXE .

    NEWLINE         reduce using rule 13 (stmt -> AXE .)
    $end            reduce using rule 13 (stmt -> AXE .)


state 6

    (14) stmt -> CHICKEN .

    NEWLINE         reduce using rule 14 (stmt -> CHICKEN .)
    $end            reduce using rule 14 (stmt -> CHICKEN .)


state 7

    (15) stmt -> ADD .

    NEWLINE         reduce using rule 15 (stmt -> ADD .)
    $end            reduce using rule 15 (stmt -> ADD .)


state 8

    (16) stmt -> FOX .

    NEWLINE         reduce using rule 16 (stmt -> FOX .)
    $end            reduce using rule 16 (stmt -> FOX .)


state 9

    (17) stmt -> ROOSTER .

    NEWLINE         reduce using rule 17 (stmt -> ROOSTER .)
    $end            reduce using rule 17 (stmt -> ROOSTER .)


state 10

    (18) stmt -> COMPARE .

    NEWLINE         reduce using rule 18 (stmt -> COMPARE .)
    $end            reduce using rule 18 (stmt -> COMPARE .)


state 11

    (19) stmt -> PICK .
    (23) stmt -> PICK . INT

    NEWLINE         reduce using rule 19 (stmt -> PICK .)
    $end            reduce using rule 19 (stmt -> PICK .)
    INT             shift and go to state 30


state 12

    (20) stmt -> PECK .
    (24) stmt -> PECK . INT

    NEWLINE         reduce using rule 20 (stmt -> PECK .)
    $end            reduce using rule 20 (stmt -> PECK .)
    INT             shift and go to state 31


state 13

    (21) stmt -> FR .

    NEWLINE         reduce using rule 21 (stmt -> FR .)
    $end            reduce using rule 21 (stmt -> FR .)


state 14

    (22) stmt -> BBQ .

    NEWLINE         reduce using rule 22 (stmt -> BBQ .)
    $end            reduce using rule 22 (stmt -> BBQ .)


state 15

    (25) stmt -> HATCH . FUNC
    (48) FUNC -> . ID DOT FUNC
    (49) FUNC -> . ID

    ID              shift and go to state 33

    FUNC                           shift and go to state 32

state 16

    (26) stmt -> PUSH . STR
    (27) stmt -> PUSH . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    STR             shift and go to state 34
    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 35

state 17

    (54) IDSTR -> STR .

    AS              reduce using rule 54 (IDSTR -> STR .)
    NEWLINE         reduce using rule 54 (IDSTR -> STR .)
    $end            reduce using rule 54 (IDSTR -> STR .)


state 18

    (28) stmt -> IDSTR . AS IDSTR

    AS              shift and go to state 42


state 19

    (29) stmt -> ID . LBRACK INT RBRACK EQ VAL
    (30) stmt -> ID . EQ VAL
    (31) stmt -> ID . LBRACK INT RBRACK
    (32) stmt -> ID .
    (53) IDSTR -> ID .

    LBRACK          shift and go to state 43
    EQ              shift and go to state 44
    NEWLINE         reduce using rule 32 (stmt -> ID .)
    $end            reduce using rule 32 (stmt -> ID .)
    AS              reduce using rule 53 (IDSTR -> ID .)


state 20

    (33) stmt -> CONST . ID EQ VAL

    ID              shift and go to state 45


state 21

    (5) enter -> BUILD . FUNC LBRACE
    (48) FUNC -> . ID DOT FUNC
    (49) FUNC -> . ID

    ID              shift and go to state 33

    FUNC                           shift and go to state 46

state 22

    (6) enter -> LOOPT . LBRACE

    LBRACE          shift and go to state 47


state 23

    (7) enter -> LOOPF . LBRACE

    LBRACE          shift and go to state 48


state 24

    (8) enter -> REPT . LBRACE

    LBRACE          shift and go to state 49


state 25

    (9) enter -> REPF . LBRACE

    LBRACE          shift and go to state 50


state 26

    (10) enter -> IFT . LBRACE

    LBRACE          shift and go to state 51


state 27

    (11) enter -> IFF . LBRACE

    LBRACE          shift and go to state 52


state 28

    (1) expressions -> expressions NEWLINE . block
    (2) expressions -> expressions NEWLINE . stmt
    (12) block -> . enter NEWLINE expressions NEWLINE RBRACE
    (13) stmt -> . AXE
    (14) stmt -> . CHICKEN
    (15) stmt -> . ADD
    (16) stmt -> . FOX
    (17) stmt -> . ROOSTER
    (18) stmt -> . COMPARE
    (19) stmt -> . PICK
    (20) stmt -> . PECK
    (21) stmt -> . FR
    (22) stmt -> . BBQ
    (23) stmt -> . PICK INT
    (24) stmt -> . PECK INT
    (25) stmt -> . HATCH FUNC
    (26) stmt -> . PUSH STR
    (27) stmt -> . PUSH mathexpr
    (28) stmt -> . IDSTR AS IDSTR
    (29) stmt -> . ID LBRACK INT RBRACK EQ VAL
    (30) stmt -> . ID EQ VAL
    (31) stmt -> . ID LBRACK INT RBRACK
    (32) stmt -> . ID
    (33) stmt -> . CONST ID EQ VAL
    (34) stmt -> .
    (5) enter -> . BUILD FUNC LBRACE
    (6) enter -> . LOOPT LBRACE
    (7) enter -> . LOOPF LBRACE
    (8) enter -> . REPT LBRACE
    (9) enter -> . REPF LBRACE
    (10) enter -> . IFT LBRACE
    (11) enter -> . IFF LBRACE
    (53) IDSTR -> . ID
    (54) IDSTR -> . STR

    AXE             shift and go to state 5
    CHICKEN         shift and go to state 6
    ADD             shift and go to state 7
    FOX             shift and go to state 8
    ROOSTER         shift and go to state 9
    COMPARE         shift and go to state 10
    PICK            shift and go to state 11
    PECK            shift and go to state 12
    FR              shift and go to state 13
    BBQ             shift and go to state 14
    HATCH           shift and go to state 15
    PUSH            shift and go to state 16
    ID              shift and go to state 19
    CONST           shift and go to state 20
    NEWLINE         reduce using rule 34 (stmt -> .)
    $end            reduce using rule 34 (stmt -> .)
    BUILD           shift and go to state 21
    LOOPT           shift and go to state 22
    LOOPF           shift and go to state 23
    REPT            shift and go to state 24
    REPF            shift and go to state 25
    IFT             shift and go to state 26
    IFF             shift and go to state 27
    STR             shift and go to state 17

    block                          shift and go to state 53
    stmt                           shift and go to state 54
    enter                          shift and go to state 4
    IDSTR                          shift and go to state 18

state 29

    (12) block -> enter NEWLINE . expressions NEWLINE RBRACE
    (1) expressions -> . expressions NEWLINE block
    (2) expressions -> . expressions NEWLINE stmt
    (3) expressions -> . block
    (4) expressions -> . stmt
    (12) block -> . enter NEWLINE expressions NEWLINE RBRACE
    (13) stmt -> . AXE
    (14) stmt -> . CHICKEN
    (15) stmt -> . ADD
    (16) stmt -> . FOX
    (17) stmt -> . ROOSTER
    (18) stmt -> . COMPARE
    (19) stmt -> . PICK
    (20) stmt -> . PECK
    (21) stmt -> . FR
    (22) stmt -> . BBQ
    (23) stmt -> . PICK INT
    (24) stmt -> . PECK INT
    (25) stmt -> . HATCH FUNC
    (26) stmt -> . PUSH STR
    (27) stmt -> . PUSH mathexpr
    (28) stmt -> . IDSTR AS IDSTR
    (29) stmt -> . ID LBRACK INT RBRACK EQ VAL
    (30) stmt -> . ID EQ VAL
    (31) stmt -> . ID LBRACK INT RBRACK
    (32) stmt -> . ID
    (33) stmt -> . CONST ID EQ VAL
    (34) stmt -> .
    (5) enter -> . BUILD FUNC LBRACE
    (6) enter -> . LOOPT LBRACE
    (7) enter -> . LOOPF LBRACE
    (8) enter -> . REPT LBRACE
    (9) enter -> . REPF LBRACE
    (10) enter -> . IFT LBRACE
    (11) enter -> . IFF LBRACE
    (53) IDSTR -> . ID
    (54) IDSTR -> . STR

    AXE             shift and go to state 5
    CHICKEN         shift and go to state 6
    ADD             shift and go to state 7
    FOX             shift and go to state 8
    ROOSTER         shift and go to state 9
    COMPARE         shift and go to state 10
    PICK            shift and go to state 11
    PECK            shift and go to state 12
    FR              shift and go to state 13
    BBQ             shift and go to state 14
    HATCH           shift and go to state 15
    PUSH            shift and go to state 16
    ID              shift and go to state 19
    CONST           shift and go to state 20
    NEWLINE         reduce using rule 34 (stmt -> .)
    BUILD           shift and go to state 21
    LOOPT           shift and go to state 22
    LOOPF           shift and go to state 23
    REPT            shift and go to state 24
    REPF            shift and go to state 25
    IFT             shift and go to state 26
    IFF             shift and go to state 27
    STR             shift and go to state 17

    enter                          shift and go to state 4
    expressions                    shift and go to state 55
    block                          shift and go to state 2
    stmt                           shift and go to state 3
    IDSTR                          shift and go to state 18

state 30

    (23) stmt -> PICK INT .

    NEWLINE         reduce using rule 23 (stmt -> PICK INT .)
    $end            reduce using rule 23 (stmt -> PICK INT .)


state 31

    (24) stmt -> PECK INT .

    NEWLINE         reduce using rule 24 (stmt -> PECK INT .)
    $end            reduce using rule 24 (stmt -> PECK INT .)


state 32

    (25) stmt -> HATCH FUNC .

    NEWLINE         reduce using rule 25 (stmt -> HATCH FUNC .)
    $end            reduce using rule 25 (stmt -> HATCH FUNC .)


state 33

    (48) FUNC -> ID . DOT FUNC
    (49) FUNC -> ID .

    DOT             shift and go to state 56
    NEWLINE         reduce using rule 49 (FUNC -> ID .)
    $end            reduce using rule 49 (FUNC -> ID .)
    LBRACE          reduce using rule 49 (FUNC -> ID .)


state 34

    (26) stmt -> PUSH STR .

    NEWLINE         reduce using rule 26 (stmt -> PUSH STR .)
    $end            reduce using rule 26 (stmt -> PUSH STR .)


state 35

    (27) stmt -> PUSH mathexpr .
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    NEWLINE         reduce using rule 27 (stmt -> PUSH mathexpr .)
    $end            reduce using rule 27 (stmt -> PUSH mathexpr .)
    MUL             shift and go to state 57
    LPAREN          shift and go to state 58
    DIV             shift and go to state 59
    FDIV            shift and go to state 60
    ADDE            shift and go to state 61
    SUB             shift and go to state 62
    POW             shift and go to state 63


state 36

    (42) mathexpr -> LPAREN . mathexpr RPAREN
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 64

state 37

    (44) mathexpr -> ADDE . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 65

state 38

    (43) mathexpr -> SUB . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 66

state 39

    (45) mathexpr -> INT .

    MUL             reduce using rule 45 (mathexpr -> INT .)
    LPAREN          reduce using rule 45 (mathexpr -> INT .)
    DIV             reduce using rule 45 (mathexpr -> INT .)
    FDIV            reduce using rule 45 (mathexpr -> INT .)
    ADDE            reduce using rule 45 (mathexpr -> INT .)
    SUB             reduce using rule 45 (mathexpr -> INT .)
    POW             reduce using rule 45 (mathexpr -> INT .)
    NEWLINE         reduce using rule 45 (mathexpr -> INT .)
    $end            reduce using rule 45 (mathexpr -> INT .)
    RPAREN          reduce using rule 45 (mathexpr -> INT .)


state 40

    (46) mathexpr -> FLOAT .

    MUL             reduce using rule 46 (mathexpr -> FLOAT .)
    LPAREN          reduce using rule 46 (mathexpr -> FLOAT .)
    DIV             reduce using rule 46 (mathexpr -> FLOAT .)
    FDIV            reduce using rule 46 (mathexpr -> FLOAT .)
    ADDE            reduce using rule 46 (mathexpr -> FLOAT .)
    SUB             reduce using rule 46 (mathexpr -> FLOAT .)
    POW             reduce using rule 46 (mathexpr -> FLOAT .)
    NEWLINE         reduce using rule 46 (mathexpr -> FLOAT .)
    $end            reduce using rule 46 (mathexpr -> FLOAT .)
    RPAREN          reduce using rule 46 (mathexpr -> FLOAT .)


state 41

    (47) mathexpr -> ID .

    MUL             reduce using rule 47 (mathexpr -> ID .)
    LPAREN          reduce using rule 47 (mathexpr -> ID .)
    DIV             reduce using rule 47 (mathexpr -> ID .)
    FDIV            reduce using rule 47 (mathexpr -> ID .)
    ADDE            reduce using rule 47 (mathexpr -> ID .)
    SUB             reduce using rule 47 (mathexpr -> ID .)
    POW             reduce using rule 47 (mathexpr -> ID .)
    NEWLINE         reduce using rule 47 (mathexpr -> ID .)
    $end            reduce using rule 47 (mathexpr -> ID .)
    RPAREN          reduce using rule 47 (mathexpr -> ID .)


state 42

    (28) stmt -> IDSTR AS . IDSTR
    (53) IDSTR -> . ID
    (54) IDSTR -> . STR

    ID              shift and go to state 68
    STR             shift and go to state 17

    IDSTR                          shift and go to state 67

state 43

    (29) stmt -> ID LBRACK . INT RBRACK EQ VAL
    (31) stmt -> ID LBRACK . INT RBRACK

    INT             shift and go to state 69


state 44

    (30) stmt -> ID EQ . VAL
    (50) VAL -> . STR
    (51) VAL -> . TOP
    (52) VAL -> . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    STR             shift and go to state 71
    TOP             shift and go to state 72
    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    VAL                            shift and go to state 70
    mathexpr                       shift and go to state 73

state 45

    (33) stmt -> CONST ID . EQ VAL

    EQ              shift and go to state 74


state 46

    (5) enter -> BUILD FUNC . LBRACE

    LBRACE          shift and go to state 75


state 47

    (6) enter -> LOOPT LBRACE .

    NEWLINE         reduce using rule 6 (enter -> LOOPT LBRACE .)


state 48

    (7) enter -> LOOPF LBRACE .

    NEWLINE         reduce using rule 7 (enter -> LOOPF LBRACE .)


state 49

    (8) enter -> REPT LBRACE .

    NEWLINE         reduce using rule 8 (enter -> REPT LBRACE .)


state 50

    (9) enter -> REPF LBRACE .

    NEWLINE         reduce using rule 9 (enter -> REPF LBRACE .)


state 51

    (10) enter -> IFT LBRACE .

    NEWLINE         reduce using rule 10 (enter -> IFT LBRACE .)


state 52

    (11) enter -> IFF LBRACE .

    NEWLINE         reduce using rule 11 (enter -> IFF LBRACE .)


state 53

    (1) expressions -> expressions NEWLINE block .

    NEWLINE         reduce using rule 1 (expressions -> expressions NEWLINE block .)
    $end            reduce using rule 1 (expressions -> expressions NEWLINE block .)


state 54

    (2) expressions -> expressions NEWLINE stmt .

    NEWLINE         reduce using rule 2 (expressions -> expressions NEWLINE stmt .)
    $end            reduce using rule 2 (expressions -> expressions NEWLINE stmt .)


state 55

    (12) block -> enter NEWLINE expressions . NEWLINE RBRACE
    (1) expressions -> expressions . NEWLINE block
    (2) expressions -> expressions . NEWLINE stmt

    NEWLINE         shift and go to state 76


state 56

    (48) FUNC -> ID DOT . FUNC
    (48) FUNC -> . ID DOT FUNC
    (49) FUNC -> . ID

    ID              shift and go to state 33

    FUNC                           shift and go to state 77

state 57

    (35) mathexpr -> mathexpr MUL . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 78

state 58

    (36) mathexpr -> mathexpr LPAREN . mathexpr RPAREN
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 79

state 59

    (37) mathexpr -> mathexpr DIV . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 80

state 60

    (38) mathexpr -> mathexpr FDIV . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 81

state 61

    (39) mathexpr -> mathexpr ADDE . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 82

state 62

    (40) mathexpr -> mathexpr SUB . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 83

state 63

    (41) mathexpr -> mathexpr POW . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    mathexpr                       shift and go to state 84

state 64

    (42) mathexpr -> LPAREN mathexpr . RPAREN
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    RPAREN          shift and go to state 85
    MUL             shift and go to state 57
    LPAREN          shift and go to state 58
    DIV             shift and go to state 59
    FDIV            shift and go to state 60
    ADDE            shift and go to state 61
    SUB             shift and go to state 62
    POW             shift and go to state 63


state 65

    (44) mathexpr -> ADDE mathexpr .
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 44 (mathexpr -> ADDE mathexpr .)
    LPAREN          reduce using rule 44 (mathexpr -> ADDE mathexpr .)
    DIV             reduce using rule 44 (mathexpr -> ADDE mathexpr .)
    FDIV            reduce using rule 44 (mathexpr -> ADDE mathexpr .)
    ADDE            reduce using rule 44 (mathexpr -> ADDE mathexpr .)
    SUB             reduce using rule 44 (mathexpr -> ADDE mathexpr .)
    NEWLINE         reduce using rule 44 (mathexpr -> ADDE mathexpr .)
    $end            reduce using rule 44 (mathexpr -> ADDE mathexpr .)
    RPAREN          reduce using rule 44 (mathexpr -> ADDE mathexpr .)
    POW             shift and go to state 63

  ! POW             [ reduce using rule 44 (mathexpr -> ADDE mathexpr .) ]
  ! MUL             [ shift and go to state 57 ]
  ! LPAREN          [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 59 ]
  ! FDIV            [ shift and go to state 60 ]
  ! ADDE            [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 66

    (43) mathexpr -> SUB mathexpr .
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 43 (mathexpr -> SUB mathexpr .)
    LPAREN          reduce using rule 43 (mathexpr -> SUB mathexpr .)
    DIV             reduce using rule 43 (mathexpr -> SUB mathexpr .)
    FDIV            reduce using rule 43 (mathexpr -> SUB mathexpr .)
    ADDE            reduce using rule 43 (mathexpr -> SUB mathexpr .)
    SUB             reduce using rule 43 (mathexpr -> SUB mathexpr .)
    NEWLINE         reduce using rule 43 (mathexpr -> SUB mathexpr .)
    $end            reduce using rule 43 (mathexpr -> SUB mathexpr .)
    RPAREN          reduce using rule 43 (mathexpr -> SUB mathexpr .)
    POW             shift and go to state 63

  ! POW             [ reduce using rule 43 (mathexpr -> SUB mathexpr .) ]
  ! MUL             [ shift and go to state 57 ]
  ! LPAREN          [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 59 ]
  ! FDIV            [ shift and go to state 60 ]
  ! ADDE            [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 67

    (28) stmt -> IDSTR AS IDSTR .

    NEWLINE         reduce using rule 28 (stmt -> IDSTR AS IDSTR .)
    $end            reduce using rule 28 (stmt -> IDSTR AS IDSTR .)


state 68

    (53) IDSTR -> ID .

    NEWLINE         reduce using rule 53 (IDSTR -> ID .)
    $end            reduce using rule 53 (IDSTR -> ID .)


state 69

    (29) stmt -> ID LBRACK INT . RBRACK EQ VAL
    (31) stmt -> ID LBRACK INT . RBRACK

    RBRACK          shift and go to state 86


state 70

    (30) stmt -> ID EQ VAL .

    NEWLINE         reduce using rule 30 (stmt -> ID EQ VAL .)
    $end            reduce using rule 30 (stmt -> ID EQ VAL .)


state 71

    (50) VAL -> STR .

    NEWLINE         reduce using rule 50 (VAL -> STR .)
    $end            reduce using rule 50 (VAL -> STR .)


state 72

    (51) VAL -> TOP .

    NEWLINE         reduce using rule 51 (VAL -> TOP .)
    $end            reduce using rule 51 (VAL -> TOP .)


state 73

    (52) VAL -> mathexpr .
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    NEWLINE         reduce using rule 52 (VAL -> mathexpr .)
    $end            reduce using rule 52 (VAL -> mathexpr .)
    MUL             shift and go to state 57
    LPAREN          shift and go to state 58
    DIV             shift and go to state 59
    FDIV            shift and go to state 60
    ADDE            shift and go to state 61
    SUB             shift and go to state 62
    POW             shift and go to state 63


state 74

    (33) stmt -> CONST ID EQ . VAL
    (50) VAL -> . STR
    (51) VAL -> . TOP
    (52) VAL -> . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    STR             shift and go to state 71
    TOP             shift and go to state 72
    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    VAL                            shift and go to state 87
    mathexpr                       shift and go to state 73

state 75

    (5) enter -> BUILD FUNC LBRACE .

    NEWLINE         reduce using rule 5 (enter -> BUILD FUNC LBRACE .)


state 76

    (12) block -> enter NEWLINE expressions NEWLINE . RBRACE
    (1) expressions -> expressions NEWLINE . block
    (2) expressions -> expressions NEWLINE . stmt
    (12) block -> . enter NEWLINE expressions NEWLINE RBRACE
    (13) stmt -> . AXE
    (14) stmt -> . CHICKEN
    (15) stmt -> . ADD
    (16) stmt -> . FOX
    (17) stmt -> . ROOSTER
    (18) stmt -> . COMPARE
    (19) stmt -> . PICK
    (20) stmt -> . PECK
    (21) stmt -> . FR
    (22) stmt -> . BBQ
    (23) stmt -> . PICK INT
    (24) stmt -> . PECK INT
    (25) stmt -> . HATCH FUNC
    (26) stmt -> . PUSH STR
    (27) stmt -> . PUSH mathexpr
    (28) stmt -> . IDSTR AS IDSTR
    (29) stmt -> . ID LBRACK INT RBRACK EQ VAL
    (30) stmt -> . ID EQ VAL
    (31) stmt -> . ID LBRACK INT RBRACK
    (32) stmt -> . ID
    (33) stmt -> . CONST ID EQ VAL
    (34) stmt -> .
    (5) enter -> . BUILD FUNC LBRACE
    (6) enter -> . LOOPT LBRACE
    (7) enter -> . LOOPF LBRACE
    (8) enter -> . REPT LBRACE
    (9) enter -> . REPF LBRACE
    (10) enter -> . IFT LBRACE
    (11) enter -> . IFF LBRACE
    (53) IDSTR -> . ID
    (54) IDSTR -> . STR

    RBRACE          shift and go to state 88
    AXE             shift and go to state 5
    CHICKEN         shift and go to state 6
    ADD             shift and go to state 7
    FOX             shift and go to state 8
    ROOSTER         shift and go to state 9
    COMPARE         shift and go to state 10
    PICK            shift and go to state 11
    PECK            shift and go to state 12
    FR              shift and go to state 13
    BBQ             shift and go to state 14
    HATCH           shift and go to state 15
    PUSH            shift and go to state 16
    ID              shift and go to state 19
    CONST           shift and go to state 20
    NEWLINE         reduce using rule 34 (stmt -> .)
    BUILD           shift and go to state 21
    LOOPT           shift and go to state 22
    LOOPF           shift and go to state 23
    REPT            shift and go to state 24
    REPF            shift and go to state 25
    IFT             shift and go to state 26
    IFF             shift and go to state 27
    STR             shift and go to state 17

    enter                          shift and go to state 4
    block                          shift and go to state 53
    stmt                           shift and go to state 54
    IDSTR                          shift and go to state 18

state 77

    (48) FUNC -> ID DOT FUNC .

    NEWLINE         reduce using rule 48 (FUNC -> ID DOT FUNC .)
    $end            reduce using rule 48 (FUNC -> ID DOT FUNC .)
    LBRACE          reduce using rule 48 (FUNC -> ID DOT FUNC .)


state 78

    (35) mathexpr -> mathexpr MUL mathexpr .
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 35 (mathexpr -> mathexpr MUL mathexpr .)
    DIV             reduce using rule 35 (mathexpr -> mathexpr MUL mathexpr .)
    FDIV            reduce using rule 35 (mathexpr -> mathexpr MUL mathexpr .)
    ADDE            reduce using rule 35 (mathexpr -> mathexpr MUL mathexpr .)
    SUB             reduce using rule 35 (mathexpr -> mathexpr MUL mathexpr .)
    NEWLINE         reduce using rule 35 (mathexpr -> mathexpr MUL mathexpr .)
    $end            reduce using rule 35 (mathexpr -> mathexpr MUL mathexpr .)
    RPAREN          reduce using rule 35 (mathexpr -> mathexpr MUL mathexpr .)
    LPAREN          shift and go to state 58
    POW             shift and go to state 63

  ! LPAREN          [ reduce using rule 35 (mathexpr -> mathexpr MUL mathexpr .) ]
  ! POW             [ reduce using rule 35 (mathexpr -> mathexpr MUL mathexpr .) ]
  ! MUL             [ shift and go to state 57 ]
  ! DIV             [ shift and go to state 59 ]
  ! FDIV            [ shift and go to state 60 ]
  ! ADDE            [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 79

    (36) mathexpr -> mathexpr LPAREN mathexpr . RPAREN
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    RPAREN          shift and go to state 89
    MUL             shift and go to state 57
    LPAREN          shift and go to state 58
    DIV             shift and go to state 59
    FDIV            shift and go to state 60
    ADDE            shift and go to state 61
    SUB             shift and go to state 62
    POW             shift and go to state 63


state 80

    (37) mathexpr -> mathexpr DIV mathexpr .
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 37 (mathexpr -> mathexpr DIV mathexpr .)
    DIV             reduce using rule 37 (mathexpr -> mathexpr DIV mathexpr .)
    FDIV            reduce using rule 37 (mathexpr -> mathexpr DIV mathexpr .)
    ADDE            reduce using rule 37 (mathexpr -> mathexpr DIV mathexpr .)
    SUB             reduce using rule 37 (mathexpr -> mathexpr DIV mathexpr .)
    NEWLINE         reduce using rule 37 (mathexpr -> mathexpr DIV mathexpr .)
    $end            reduce using rule 37 (mathexpr -> mathexpr DIV mathexpr .)
    RPAREN          reduce using rule 37 (mathexpr -> mathexpr DIV mathexpr .)
    LPAREN          shift and go to state 58
    POW             shift and go to state 63

  ! LPAREN          [ reduce using rule 37 (mathexpr -> mathexpr DIV mathexpr .) ]
  ! POW             [ reduce using rule 37 (mathexpr -> mathexpr DIV mathexpr .) ]
  ! MUL             [ shift and go to state 57 ]
  ! DIV             [ shift and go to state 59 ]
  ! FDIV            [ shift and go to state 60 ]
  ! ADDE            [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 81

    (38) mathexpr -> mathexpr FDIV mathexpr .
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 38 (mathexpr -> mathexpr FDIV mathexpr .)
    DIV             reduce using rule 38 (mathexpr -> mathexpr FDIV mathexpr .)
    FDIV            reduce using rule 38 (mathexpr -> mathexpr FDIV mathexpr .)
    ADDE            reduce using rule 38 (mathexpr -> mathexpr FDIV mathexpr .)
    SUB             reduce using rule 38 (mathexpr -> mathexpr FDIV mathexpr .)
    NEWLINE         reduce using rule 38 (mathexpr -> mathexpr FDIV mathexpr .)
    $end            reduce using rule 38 (mathexpr -> mathexpr FDIV mathexpr .)
    RPAREN          reduce using rule 38 (mathexpr -> mathexpr FDIV mathexpr .)
    LPAREN          shift and go to state 58
    POW             shift and go to state 63

  ! LPAREN          [ reduce using rule 38 (mathexpr -> mathexpr FDIV mathexpr .) ]
  ! POW             [ reduce using rule 38 (mathexpr -> mathexpr FDIV mathexpr .) ]
  ! MUL             [ shift and go to state 57 ]
  ! DIV             [ shift and go to state 59 ]
  ! FDIV            [ shift and go to state 60 ]
  ! ADDE            [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 82

    (39) mathexpr -> mathexpr ADDE mathexpr .
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    ADDE            reduce using rule 39 (mathexpr -> mathexpr ADDE mathexpr .)
    SUB             reduce using rule 39 (mathexpr -> mathexpr ADDE mathexpr .)
    NEWLINE         reduce using rule 39 (mathexpr -> mathexpr ADDE mathexpr .)
    $end            reduce using rule 39 (mathexpr -> mathexpr ADDE mathexpr .)
    RPAREN          reduce using rule 39 (mathexpr -> mathexpr ADDE mathexpr .)
    MUL             shift and go to state 57
    LPAREN          shift and go to state 58
    DIV             shift and go to state 59
    FDIV            shift and go to state 60
    POW             shift and go to state 63

  ! MUL             [ reduce using rule 39 (mathexpr -> mathexpr ADDE mathexpr .) ]
  ! LPAREN          [ reduce using rule 39 (mathexpr -> mathexpr ADDE mathexpr .) ]
  ! DIV             [ reduce using rule 39 (mathexpr -> mathexpr ADDE mathexpr .) ]
  ! FDIV            [ reduce using rule 39 (mathexpr -> mathexpr ADDE mathexpr .) ]
  ! POW             [ reduce using rule 39 (mathexpr -> mathexpr ADDE mathexpr .) ]
  ! ADDE            [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 83

    (40) mathexpr -> mathexpr SUB mathexpr .
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    ADDE            reduce using rule 40 (mathexpr -> mathexpr SUB mathexpr .)
    SUB             reduce using rule 40 (mathexpr -> mathexpr SUB mathexpr .)
    NEWLINE         reduce using rule 40 (mathexpr -> mathexpr SUB mathexpr .)
    $end            reduce using rule 40 (mathexpr -> mathexpr SUB mathexpr .)
    RPAREN          reduce using rule 40 (mathexpr -> mathexpr SUB mathexpr .)
    MUL             shift and go to state 57
    LPAREN          shift and go to state 58
    DIV             shift and go to state 59
    FDIV            shift and go to state 60
    POW             shift and go to state 63

  ! MUL             [ reduce using rule 40 (mathexpr -> mathexpr SUB mathexpr .) ]
  ! LPAREN          [ reduce using rule 40 (mathexpr -> mathexpr SUB mathexpr .) ]
  ! DIV             [ reduce using rule 40 (mathexpr -> mathexpr SUB mathexpr .) ]
  ! FDIV            [ reduce using rule 40 (mathexpr -> mathexpr SUB mathexpr .) ]
  ! POW             [ reduce using rule 40 (mathexpr -> mathexpr SUB mathexpr .) ]
  ! ADDE            [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 84

    (41) mathexpr -> mathexpr POW mathexpr .
    (35) mathexpr -> mathexpr . MUL mathexpr
    (36) mathexpr -> mathexpr . LPAREN mathexpr RPAREN
    (37) mathexpr -> mathexpr . DIV mathexpr
    (38) mathexpr -> mathexpr . FDIV mathexpr
    (39) mathexpr -> mathexpr . ADDE mathexpr
    (40) mathexpr -> mathexpr . SUB mathexpr
    (41) mathexpr -> mathexpr . POW mathexpr

    MUL             reduce using rule 41 (mathexpr -> mathexpr POW mathexpr .)
    LPAREN          reduce using rule 41 (mathexpr -> mathexpr POW mathexpr .)
    DIV             reduce using rule 41 (mathexpr -> mathexpr POW mathexpr .)
    FDIV            reduce using rule 41 (mathexpr -> mathexpr POW mathexpr .)
    ADDE            reduce using rule 41 (mathexpr -> mathexpr POW mathexpr .)
    SUB             reduce using rule 41 (mathexpr -> mathexpr POW mathexpr .)
    NEWLINE         reduce using rule 41 (mathexpr -> mathexpr POW mathexpr .)
    $end            reduce using rule 41 (mathexpr -> mathexpr POW mathexpr .)
    RPAREN          reduce using rule 41 (mathexpr -> mathexpr POW mathexpr .)
    POW             shift and go to state 63

  ! POW             [ reduce using rule 41 (mathexpr -> mathexpr POW mathexpr .) ]
  ! MUL             [ shift and go to state 57 ]
  ! LPAREN          [ shift and go to state 58 ]
  ! DIV             [ shift and go to state 59 ]
  ! FDIV            [ shift and go to state 60 ]
  ! ADDE            [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 85

    (42) mathexpr -> LPAREN mathexpr RPAREN .

    MUL             reduce using rule 42 (mathexpr -> LPAREN mathexpr RPAREN .)
    LPAREN          reduce using rule 42 (mathexpr -> LPAREN mathexpr RPAREN .)
    DIV             reduce using rule 42 (mathexpr -> LPAREN mathexpr RPAREN .)
    FDIV            reduce using rule 42 (mathexpr -> LPAREN mathexpr RPAREN .)
    ADDE            reduce using rule 42 (mathexpr -> LPAREN mathexpr RPAREN .)
    SUB             reduce using rule 42 (mathexpr -> LPAREN mathexpr RPAREN .)
    POW             reduce using rule 42 (mathexpr -> LPAREN mathexpr RPAREN .)
    NEWLINE         reduce using rule 42 (mathexpr -> LPAREN mathexpr RPAREN .)
    $end            reduce using rule 42 (mathexpr -> LPAREN mathexpr RPAREN .)
    RPAREN          reduce using rule 42 (mathexpr -> LPAREN mathexpr RPAREN .)


state 86

    (29) stmt -> ID LBRACK INT RBRACK . EQ VAL
    (31) stmt -> ID LBRACK INT RBRACK .

    EQ              shift and go to state 90
    NEWLINE         reduce using rule 31 (stmt -> ID LBRACK INT RBRACK .)
    $end            reduce using rule 31 (stmt -> ID LBRACK INT RBRACK .)


state 87

    (33) stmt -> CONST ID EQ VAL .

    NEWLINE         reduce using rule 33 (stmt -> CONST ID EQ VAL .)
    $end            reduce using rule 33 (stmt -> CONST ID EQ VAL .)


state 88

    (12) block -> enter NEWLINE expressions NEWLINE RBRACE .

    NEWLINE         reduce using rule 12 (block -> enter NEWLINE expressions NEWLINE RBRACE .)
    $end            reduce using rule 12 (block -> enter NEWLINE expressions NEWLINE RBRACE .)


state 89

    (36) mathexpr -> mathexpr LPAREN mathexpr RPAREN .

    MUL             reduce using rule 36 (mathexpr -> mathexpr LPAREN mathexpr RPAREN .)
    LPAREN          reduce using rule 36 (mathexpr -> mathexpr LPAREN mathexpr RPAREN .)
    DIV             reduce using rule 36 (mathexpr -> mathexpr LPAREN mathexpr RPAREN .)
    FDIV            reduce using rule 36 (mathexpr -> mathexpr LPAREN mathexpr RPAREN .)
    ADDE            reduce using rule 36 (mathexpr -> mathexpr LPAREN mathexpr RPAREN .)
    SUB             reduce using rule 36 (mathexpr -> mathexpr LPAREN mathexpr RPAREN .)
    POW             reduce using rule 36 (mathexpr -> mathexpr LPAREN mathexpr RPAREN .)
    NEWLINE         reduce using rule 36 (mathexpr -> mathexpr LPAREN mathexpr RPAREN .)
    $end            reduce using rule 36 (mathexpr -> mathexpr LPAREN mathexpr RPAREN .)
    RPAREN          reduce using rule 36 (mathexpr -> mathexpr LPAREN mathexpr RPAREN .)


state 90

    (29) stmt -> ID LBRACK INT RBRACK EQ . VAL
    (50) VAL -> . STR
    (51) VAL -> . TOP
    (52) VAL -> . mathexpr
    (35) mathexpr -> . mathexpr MUL mathexpr
    (36) mathexpr -> . mathexpr LPAREN mathexpr RPAREN
    (37) mathexpr -> . mathexpr DIV mathexpr
    (38) mathexpr -> . mathexpr FDIV mathexpr
    (39) mathexpr -> . mathexpr ADDE mathexpr
    (40) mathexpr -> . mathexpr SUB mathexpr
    (41) mathexpr -> . mathexpr POW mathexpr
    (42) mathexpr -> . LPAREN mathexpr RPAREN
    (43) mathexpr -> . SUB mathexpr
    (44) mathexpr -> . ADDE mathexpr
    (45) mathexpr -> . INT
    (46) mathexpr -> . FLOAT
    (47) mathexpr -> . ID

    STR             shift and go to state 71
    TOP             shift and go to state 72
    LPAREN          shift and go to state 36
    SUB             shift and go to state 38
    ADDE            shift and go to state 37
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    VAL                            shift and go to state 91
    mathexpr                       shift and go to state 73

state 91

    (29) stmt -> ID LBRACK INT RBRACK EQ VAL .

    NEWLINE         reduce using rule 29 (stmt -> ID LBRACK INT RBRACK EQ VAL .)
    $end            reduce using rule 29 (stmt -> ID LBRACK INT RBRACK EQ VAL .)

